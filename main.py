from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import logging

# –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
API_TOKEN = "7612081343:AAHNPmF8Mepb_Bl1Z817raoFy99wPOvd7ZM"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–ª–æ–≤–∞—Ä—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
offers = {
    "–ò–Ω—Ç–µ—Ä–≤—å—é –≤ –æ—Å–æ–±–µ–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏": "üé• - —ç—Ç–æ —Å–∞–º–æ–µ –¥–æ—Ä–æ–≥–æ–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ —Å–∏–ª—É —Å–≤–æ–µ–π –≤—ã—Å–æ–∫–æ–π –∑–∞—Ç—Ä–∞—Ç–Ω–æ–π —á–∞—Å—Ç–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞ –≤–æ–∑–¥—É—à–Ω–æ–º —à–∞—Ä–µ, –≤ –∫–∞–±—Ä–∏–æ–ª–µ—Ç–µ –Ω–∞ —Ç—Ä–∞—Å—Å–µ, –Ω–∞ —è—Ö—Ç–µ —Å –≤—ã—Ö–æ–¥–æ–º –≤ –∑–∞–ª–∏–≤, –≤ –±–∞—Å—Å–µ–π–Ω–µ –Ω–∞ –∫—Ä—ã—à–µ, –≤ –•–æ–≥–≤–∞—Ä—Ç—Å —ç–∫—Å–ø—Ä–µ—Å—Å–µ –∏ —Ç. –¥. –ü–æ–¥ –∫–∞–∂–¥–æ–≥–æ –≥–µ—Ä–æ—è –ø–æ–¥–±–∏—Ä–∞–µ—Ç—Å—è –ª–æ–∫–∞—Ü–∏—è, –∫–æ—Å—Ç—é–º—ã, –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã. –ò–Ω—Ç–µ—Ä–≤—å—é —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –≤ –ø–æ–¥–∫–∞—Å—Ç–µ –Ω–∞ –Æ—Ç—é–±, –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–µ –∏ –Ω–∞ –¢–í. –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç 150 000 —Ä—É–±.",
    "–ò–Ω—Ç–µ—Ä–≤—å—é –≤ —Å—Ç—É–¥–∏–∏": "üì∫ - –æ–±—ã—á–Ω–æ–µ —Å—Ç—É–¥–∏–π–Ω–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é. –¢—É–¥–∞ –≤—Ö–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤–∞—è —Å—Ç—É–¥–∏—è, –º–µ–π–∫, —Å—ä–µ–º–∫–∞ –Ω–∞ 3 –∫–∞–º–µ—Ä—ã, –º–æ–Ω—Ç–∞–∂ –∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–∞ —Ç–µ—Ö –∂–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö ‚Äî –æ—Ç 65 000 —Ä—É–±.",
    "–†–µ–ø–æ—Ä—Ç–∞–∂ –Ω–∞ –¢–í": "üìª - –æ–±—Å—É–∂–¥–∞–µ—Ç—Å—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ. –ó–¥–µ—Å—å –Ω—É–∂–µ–Ω –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–≤–æ–¥. –ù–æ –µ–≥–æ –º–æ–∂–Ω–æ –∏ —Å–æ–∑–¥–∞—Ç—å. –û—Ç 100 000 —Ä—É–±.",
    "–†–∞–¥–∏–æ-–∏–Ω—Ç–µ—Ä–≤—å—é": "üéô - –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–∞ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–π —Ä–∞–¥–∏–æ—Å—Ç–∞–Ω—Ü–∏–∏ —Å –æ—Ö–≤–∞—Ç–æ–º –Ω–∞ 50 –º–ª–Ω —Å–ª—É—à–∞—Ç–µ–ª–µ–π. –•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂ 10 –º–∏–Ω—É—Ç.  120 000 —Ä—É–±.",
    "–†–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç": "üì¢ - —Ä–µ–∫–ª–∞–º–Ω—ã–π –ø–æ—Å—Ç –≤ —Ç–≥-–∫–∞–Ω–∞–ª–µ + –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º (50–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤) ‚Äî –æ—Ç 10 000 —Ä—É–±.",
    "–ú–µ–¥–∏–∞–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è": "ü§ù 2 —á–∞—Å–∞ –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ï–∫–∞—Ç–µ—Ä–∏–Ω—ã –∏ –ø–æ–ª—É—á–∞–µ—Ç–µ –ø–æ—Ä—Ç—Ä–µ—Ç –ª–∏—á–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞, –≤–∞—à–∏ —Ñ–∏—à–∫–∏ –∏ –º–µ–¥–∏–∞–ø–ª–∞–Ω –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–¥–∞–∂ ‚Äî 15 000 —Ä—É–±.",
    "–û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã": "üìö –ö—É—Ä—Å –ø–æ –≥–æ–ª–æ—Å—É ‚Äî 50 000 —Ä—É–±., –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äî –æ—Ç 3 000 —Ä—É–±."
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_choices = {}

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —Å –≥–∞–ª–æ—á–∫–∞–º–∏
def generate_keyboard(user_id):
    kb = InlineKeyboardMarkup(row_width=1)
    selected = user_choices.get(user_id, [])
    for item in offers:
        checked = "‚úÖ" if item in selected else "‚òê"
        kb.add(InlineKeyboardButton(f"{checked} {item}", callback_data=f"toggle_{item}"))
    kb.add(InlineKeyboardButton("‚úâÔ∏è –ì–æ—Ç–æ–≤–æ", callback_data="submit"))
    return kb

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id
    user_choices[user_id] = []
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç –ï–∫–∞—Ç–µ—Ä–∏–Ω—ã –°–µ–¥–æ–≤–æ–π.\n\n"
        "–ú–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å –º–µ–¥–∏–∞–ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ–º –∏ –Ω–µ —Ç–æ–ª—å–∫–æ.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ) –∏ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≥–æ—Ç–æ–≤–æ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=generate_keyboard(user_id)
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —á–µ–∫–±–æ–∫—Å—ã
@dp.callback_query_handler(lambda c: c.data.startswith("toggle_"))
async def toggle_selection(callback_query: types.CallbackQuery):
    item = callback_query.data.replace("toggle_", "")
    uid = callback_query.from_user.id
    if uid not in user_choices:
        user_choices[uid] = []
    if item in user_choices[uid]:
        user_choices[uid].remove(item)
    else:
        user_choices[uid].append(item)
    await callback_query.message.edit_reply_markup(reply_markup=generate_keyboard(uid))
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"
@dp.callback_query_handler(lambda c: c.data == "submit")
async def handle_submission(callback_query: types.CallbackQuery):
    uid = callback_query.from_user.id
    selected = user_choices.get(uid, [])

    if not selected:
        await callback_query.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—É–Ω–∫—Ç.", show_alert=True)
        return

    response = "üìù –í—ã –≤—ã–±—Ä–∞–ª–∏:\n\n"
    for item in selected:
        response += f"{offers[item]}\n\n"

    await bot.send_message(uid, response.strip())

    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(
        InlineKeyboardButton("‚úÖ –î–∞, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ. –°–≤—è–∑–∞—Ç—å—Å—è —Å –ï–∫–∞—Ç–µ—Ä–∏–Ω–æ–π", url="https://t.me/Hecate_Media"),
        InlineKeyboardButton("‚è≥ –ü–æ–¥—É–º–∞—Ç—å –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –ø–æ–∑–∂–µ", callback_data="later")
    )

    await bot.send_message(uid, "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º?", reply_markup=kb)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—É–º–∞—Ç—å"
@dp.callback_query_handler(lambda c: c.data == "later")
async def handle_later(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è! –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –±–æ—Ç—É –∏ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ.")

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥—É /start...")
    executor.start_polling(dp, skip_updates=True)
